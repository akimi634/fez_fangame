<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Código de criação do objeto que é responsável por suavizar a movimentação da câmera.

//De início, esse objeto seta a variável z dele para 160, apenas para ter um efeito de a câmera vindo de cima, e parando no personagem.
//Boiolice. Tenho que tirar depois.
z=160;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Códigos que são executados a cada frame:

//No caso, para a suavização dar certo, o objeto pega a posição x, y e z do obj_gomez e
//faz um cálculo para pegar a diferença entre eles e o x, y e z próprio, e essa diferença
//é dividida por 6, só pra fazer a suavização.
if (x&lt;obj_gomez.x) { x+=(obj_gomez.x-x)/6; }
if (x&gt;obj_gomez.x) { x-=(x-obj_gomez.x)/6; }
if (y&lt;obj_gomez.y) { y+=(obj_gomez.y-y)/6; }
if (y&gt;obj_gomez.y) { y-=(y-obj_gomez.y)/6; }
if (z&lt;obj_gomez.z) { z+=(obj_gomez.z-z)/6; }
if (z&gt;obj_gomez.z) { z-=(z-obj_gomez.z)/6; }

//E, pra tentar deixar tudo com um ar mais "pixelizado", sem ter "meio-pixels" por causa do 3D,
//as variáveis x, y e z dele próprio são arredondadas.
x=round(x);
y=round(y);
z=round(z);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
