<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_block</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z=0;
lado_dir=choose(3,4,5,6);
lado_cim=choose(3,4,5,6);
lado_esq=choose(3,4,5,6);
lado_bai=choose(3,4,5,6);
lado_topo=7;
lado_base=7;
alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bloco_dir=instance_position(x+16,y,obj_block);
bloco_cim=instance_position(x,y-16,obj_block);
bloco_esq=instance_position(x-16,y,obj_block);
bloco_bai=instance_position(x,y+16,obj_block);
encontrou_dir=0;
encontrou_cim=0;
encontrou_esq=0;
encontrou_bai=0;
with (bloco_dir) {
    if (self.z==other.z) {
        other.encontrou_dir=1;
    }
}
with (bloco_cim) {
    if (self.z==other.z) {
        other.encontrou_cim=1;
    }
}
with (bloco_esq) {
    if (self.z==other.z) {
        other.encontrou_esq=1;
    }
}
with (bloco_bai) {
    if (self.z==other.z) {
        other.encontrou_bai=1;
    }
}
if (encontrou_dir==0)
and (encontrou_cim==0)
and (encontrou_esq==0)
and (encontrou_bai==0) {
    lado_dir=0;
    lado_cim=0;
    lado_esq=0;
    lado_bai=0;
} else
if (encontrou_dir==1)
and (encontrou_cim==0)
and (encontrou_esq==0)
and (encontrou_bai==0) {
    lado_dir=-1;
    lado_cim=2;
    lado_esq=0;
    lado_bai=1;
} else
if (encontrou_dir==0)
and (encontrou_cim==1)
and (encontrou_esq==0)
and (encontrou_bai==0) {
    lado_dir=1;
    lado_cim=-1;
    lado_esq=2;
    lado_bai=0;
} else
if (encontrou_dir==0)
and (encontrou_cim==0)
and (encontrou_esq==1)
and (encontrou_bai==0) {
    lado_dir=0;
    lado_cim=1;
    lado_esq=-1;
    lado_bai=2;
} else
if (encontrou_dir==0)
and (encontrou_cim==0)
and (encontrou_esq==0)
and (encontrou_bai==1) {
    lado_dir=2;
    lado_cim=0;
    lado_esq=1;
    lado_bai=-1;
} else
if (encontrou_dir==1)
and (encontrou_cim==1)
and (encontrou_esq==0)
and (encontrou_bai==0) {
    lado_dir=-1;
    lado_cim=-1;
    lado_esq=2;
    lado_bai=1;
} else
if (encontrou_dir==0)
and (encontrou_cim==1)
and (encontrou_esq==1)
and (encontrou_bai==0) {
    lado_dir=1;
    lado_cim=-1;
    lado_esq=-1;
    lado_bai=2;
} else
if (encontrou_dir==0)
and (encontrou_cim==0)
and (encontrou_esq==1)
and (encontrou_bai==1) {
    lado_dir=2;
    lado_cim=1;
    lado_esq=-1;
    lado_bai=-1;
} else
if (encontrou_dir==1)
and (encontrou_cim==0)
and (encontrou_esq==0)
and (encontrou_bai==1) {
    lado_dir=-1;
    lado_cim=2;
    lado_esq=1;
    lado_bai=-1;
} else
if (encontrou_dir==1)
and (encontrou_cim==0)
and (encontrou_esq==1)
and (encontrou_bai==0) {
    lado_dir=-1;
    lado_cim=choose(3,4,5,6);
    lado_esq=-1;
    lado_bai=choose(3,4,5,6);
} else
if (encontrou_dir==0)
and (encontrou_cim==1)
and (encontrou_esq==0)
and (encontrou_bai==1) {
    lado_dir=choose(3,4,5,6);
    lado_cim=-1;
    lado_esq=choose(3,4,5,6);
    lado_bai=-1;
} else
if (encontrou_dir==1)
and (encontrou_cim==1)
and (encontrou_esq==1)
and (encontrou_bai==0) {
    lado_dir=-1;
    lado_cim=-1;
    lado_esq=-1;
    lado_bai=choose(3,4,5,6);
}
if (encontrou_dir==0)
and (encontrou_cim==1)
and (encontrou_esq==1)
and (encontrou_bai==1) {
    lado_dir=choose(3,4,5,6);
    lado_cim=-1;
    lado_esq=-1;
    lado_bai=-1;
}
if (encontrou_dir==1)
and (encontrou_cim==0)
and (encontrou_esq==1)
and (encontrou_bai==1) {
    lado_dir=-1;
    lado_cim=choose(3,4,5,6);
    lado_esq=-1;
    lado_bai=-1;
}
if (encontrou_dir==1)
and (encontrou_cim==1)
and (encontrou_esq==0)
and (encontrou_bai==1) {
    lado_dir=-1;
    lado_cim=-1;
    lado_esq=choose(3,4,5,6);
    lado_bai=-1;
}
if (encontrou_dir==1)
and (encontrou_cim==1)
and (encontrou_esq==1)
and (encontrou_bai==1) {
    lado_dir=-1;
    lado_cim=-1;
    lado_esq=-1;
    lado_bai=-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cima:
draw_set_color(c_white);
//if (lado_cim&gt;-1) and ((obj_camera.direcao_view&gt;0) and (obj_camera.direcao_view&lt;180)) {
    d3d_draw_wall(x+16,y,z+16,x,y,z,sprite_get_texture(spr_block,lado_cim),1,1);
//}
//Topo:
if (lado_topo&gt;-1) { d3d_draw_floor(x,y,z+16,x+16,y+16,z+16,sprite_get_texture(spr_block,lado_topo),1,1); }
//Direita:
draw_set_color(c_ltgray);
//if (lado_dir&gt;-1) and (((obj_camera.direcao_view&gt;-90) and (obj_camera.direcao_view&lt;90)) or ((obj_camera.direcao_view&gt;270) and (obj_camera.direcao_view&lt;450))) {
    d3d_draw_wall(x+16,y+16,z+16,x+16,y,z,sprite_get_texture(spr_block,lado_dir),1,1);
//}
//Baixo:
draw_set_color(c_gray);
//if (lado_bai&gt;-1) and (((obj_camera.direcao_view&gt;180) and (obj_camera.direcao_view&lt;360)) or ((obj_camera.direcao_view&gt;-180) and (obj_camera.direcao_view&lt;0))) {
    d3d_draw_wall(x,y+16,z+16,x+16,y+16,z,sprite_get_texture(spr_block,lado_bai),1,1);
//}
//Base:
if (lado_base&gt;-1) { d3d_draw_floor(x,y,z,x+16,y+16,z,sprite_get_texture(spr_block,lado_base),1,1); }
//Esquerda:
draw_set_color(c_ltgray);
//if (lado_esq&gt;-1) and ((obj_camera.direcao_view&gt;90) and (obj_camera.direcao_view&lt;270)) {
    d3d_draw_wall(x,y,z+16,x,y+16,z,sprite_get_texture(spr_block,lado_esq),1,1);
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
